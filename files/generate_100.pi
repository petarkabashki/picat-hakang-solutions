/* 

  Generate 100 (or in general N) from 1..9 in Picat.

  From
  http://stackoverflow.com/questions/30134535/how-to-use-prolog-constraints
  """
  Write a program that outputs all possibilities to put + or - or nothing between the numbers 
  1, 2, ..., 9 (in this order) such that the result is always 100. 
  For example: 1 + 2 + 34 – 5 + 67 – 8 + 9 = 100.
  """


  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


main => go.


go =>
  All = findall(A, give_N(100,A)),
  foreach(A in All) println(A) end,
  println(len=All.length),
  nl.


%
% Using give_N2/2
%
go2 =>
  N = 100,
  All = findall(A, give_N2(N,A)),
  foreach(A in All) println(A) end,
  println(len=All.length),
  nl.

go3 =>
  foreach(N in 0..100) 
     All = findall(A, give_N2(N,A)),
     Len = All.length,
     if Len > 0 then
        println([n=N,len=Len]),
        foreach(A in All) println(A) end,
        nl
     end,
     if Len == 0 then
       println("No solution for"=N)
       % halt
     end
  end,
  nl.


%
% This approach was inspired by CapelliC's solution
%
give_N(N, A) =>
    generate("1", S),
    SS = S.flatten(),
    PT = parse_term(SS),
    (integer(PT) -> PT == N ; PT.apply() == N),
    A = SS.

generate("9", Ns) ?=> 
    Ns = "9".
generate(N, NNs) =>
    NNs = [N|Ns],
    N.to_integer() < 9, 
    sep(N, Ns).

sep(N, L) =>
    % ( L = "+" ++ Ns ; L = "-" ++ Ns ; L = "*" ++ Ns ; L = "//" ++ Ns ; L = Ns ),
    ( L = "+" ++ Ns ; L = "-" ++ Ns ; L = Ns ),
    M = (N.to_integer()+1).to_string(),
    generate(M, Ns).


%
% another approach, slightly faster than give_N/2.
%
give_N2(N,A) =>
  L = [I.to_string() : I in 1..9],
  Sep = ["+","-",""],
  % Sep = ["+","-","*", "//", ""], % adding * and //
  foreach(I in 1..8)
    member(S, Sep),
    L[I] := L[I] ++ S
  end,
  SS = L.flatten(),
  PT = parse_term(SS),
  (integer(PT) -> PT == N ; PT.apply() == N),
  A = SS.
