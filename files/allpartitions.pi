/*

  All partitions in Picat.

  Simple implementation of all partitions.

  For the number of different partitions, see
  The On-Line Encyclopedia of Integer Sequences:
  http://www.research.att.com/~njas/sequences/A000041


  Model created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/
import cp.

main => go.

%
% The first part is simply to get an ordered array where the sum is N.
% This ordering is needed for removing symmetries when all
% 0's is remove in the second part.
% 
allpartitions(N, Xs) =>

        % part I: get all candidates
        X = new_list(N),
        X :: 0..N,
        N #= sum(X),
        increasing(X),
       
        solve([ffc,down], X),

        % part II: now remove all 0's from X
        Xs = delete_all(X, 0).

increasing(List) =>
        Len = length(List),
        foreach(I in 2..Len) 
            List[I-1] #=< List[I] 
         end.


go ?=>
        N :: 2..1034,
        indomain(N),

        L = findall(X, allpartitions(N, X)),
        Len = length(L),

        % for larger N we really don't want to print all partitions
        if N =< 8 then
              writef("\nN: %d\n", N),
              foreach(El in L) 
                  writeln(El) 
              end
        end,
        writef("n:%d len:%d\n", N,Len),
        fail.

go => true.

