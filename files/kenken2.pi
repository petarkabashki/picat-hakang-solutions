/*

  KenKen puzzle in Picat.

  http://en.wikipedia.org/wiki/KenKen
  """
  KenKen or KEN-KEN is a style of arithmetic and logical puzzle sharing 
  several characteristics with sudoku. The name comes from Japanese and 
  is translated as "square wisdom" or "cleverness squared".
  ...
  The objective is to fill the grid in with the digits 1 through 6 such that:

    * Each row contains exactly one of each digit
    * Each column contains exactly one of each digit
    * Each bold-outlined group of cells is a cage containing digits which 
      achieve the specified result using the specified mathematical operation: 
        addition (+), 
        subtraction (-), 
        multiplication (x), 
        and division (Ã·). 
        (Unlike in Killer sudoku, digits may repeat within a group.)

  ...
  More complex KenKen problems are formed using the principles described 
  above but omitting the symbols +, -, x and Ã·, thus leaving them as 
  yet another unknown to be determined.
  """

  Model created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import util.
import sat.

main => go.

go =>
    problem(1,N, Problem),
    time2($kenken2(N, Problem)).

        
latin_square(Board) =>
   foreach(Row in Board) all_different(Row) end,
   foreach(Column in Board.columns()) all_different(Column) end.


kenken2(N, Problem) =>

    Len = length(Problem),

    % decision variables
    X = new_array(N,N),
    X :: 1..N,

    % all rows and columns must be unique
    latin_square(X),

    foreach(I in 1..Len)
       % extract the hints
       [Result, Coeffs] = Problem[I],
       % calculate this hint
       calc(Result, Coeffs,X)
    end,

    % solve([ff,updown],X),
    solve(X),

    pretty_print(X).


calc(Result, Coeffs,X) =>
        Len = length(Coeffs),
        if Len == 2 then
            % special handling for size 2
            [[AR,AC],[BR,BC]] = Coeffs,
            A #= X[AR,AC],
            B #= X[BR,BC],
            % check2(A,B,Result)
            (
            A + B #= Result #\/
            A * B #= Result #\/
            A * Result #= B #\/ % B/A = Result
            B * Result #= A #\/ % A/B = Result
            A - B #= Result #\/
            B - A #= Result
            )

        else 
            % or size > 2
            CoeffRes = [X[R,C] : [R,C] in Coeffs],
            check_many(Result, CoeffRes)
        end.


% either sum or product
check_many(Result, CoeffRes) ?=> Result #= prod(CoeffRes).
check_many(Result, CoeffRes) ?=> Result #= sum(CoeffRes).



% product of a list

prodlist(List, Product) =>
   Product1 = 1, 
   foreach(L in List)
      % We must "taint" the variable to be a CP variable
      Product1 := $Product1 * L
   end,
   Product #= Product1.


pretty_print(Board) =>
   N = Board.length,
   foreach(I in 1..N)
      foreach(J in 1..N)
          X = Board[I,J],
          if var(X) then writef("  _") else writef("  %w", X) end
       end,
       nl
   end,
   nl.

%
% State the problem, i.e. the hints. 
%
% For a better view of the problem, see 
%  http://en.wikipedia.org/wiki/File:KenKenProblem.svg  
%
%
%   The solution is:
%     5 6 3 4 1 2
%     6 1 4 5 2 3
%     4 5 2 3 6 1
%     3 4 1 2 5 6
%     2 3 6 1 4 5
%     1 2 5 6 3 4
%
problem(1, Size, M) => 
      Size = 6,
         M = [
               [ 11, [[1,1], [2,1]]],
               [  2, [[1,2], [1,3]]],
               [ 20, [[1,4], [2,4]]],
               [  6, [[1,5], [1,6], [2,6], [3,6]]],
               [  3, [[2,2], [2,3]]],
               [  3, [[2,5], [3,5]]],
               [240, [[3,1], [3,2], [4,1], [4,2]]],
               [  6, [[3,3], [3,4]]],  
               [  6, [[4,3], [5,3]]],
               [  7, [[4,4], [5,4], [5,5]]],
               [ 30, [[4,5], [4,6]]],  
               [  6, [[5,1], [5,2]]],
               [  9, [[5,6], [6,6]]],
               [  8, [[6,1], [6,2], [6,3]]],
               [  2, [[6,4], [6,5]]]
           ].


