/*

  Discrete tomography in Picat.

  Note: The origin of the problem is from ECLiPSe,
  but this model has been transformed in this way
     MiniZinc -> SICStus Prolog -> ECLiPSe -> B-Prolog -> Picat
  Here is my own take at the problem.

  Problem from http://eclipse-clp.org/examples/tomo.ecl.txt
  """
  This is a little "tomography" problem, taken from an old issue
  of Scientific American.
 
  A matrix which contains zeroes and ones gets "x-rayed" vertically and
  horizontally, giving the total number of ones in each row and column.
  The problem is to reconstruct the contents of the matrix from this
  information. Sample run:
 
  ?- go.
     0 0 7 1 6 3 4 5 2 7 0 0
  0                         
  0                         
  8      * * * * * * * *    
  2      *             *    
  6      *   * * * *   *    
  4      *   *     *   *    
  5      *   *   * *   *    
  3      *   *         *    
  7      *   * * * * * *    
  0                         
  0                         
 
 
  Eclipse solution by Joachim Schimpf, IC-Parc
  """

  Model created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import cp.

main => go.

go =>
    foreach(P in 1..4) 
       _L = findall(_,discrete_tomography(P))
    end.


discrete_tomography(P) =>

    problem(P,RowSums,ColSums),
    writef("\nProblem %d:\n",P),

    Rows = length(RowSums),
    Cols = length(ColSums),

    X = new_array(Rows,Cols),
    X :: 0..1,
    
    % check rows
    foreach(I in 1..Rows)
       RowSums[I] #= sum([X[I,J] : J in 1..Cols])
    end,

    foreach(J in 1..Cols) 
       ColSums[J] #= sum([X[I,J] : I in 1..Rows])
    end,

    solve(X),
    print_square(X).


print_square(Square) =>
    Rows = Square.length,
    Cols = Square[1].length,
    foreach(I in 1..Rows)
       foreach(J in 1..Cols)
          if Square[I,J] == 0 then writef(" ") else writef("X") end
       end,
       writef("\n")
    end,
    writef("\n").

%
% The three first problems are from the ECLiPSe model:
%
% The above stated problem
problem(1, R, S) => 
       R = [0,0,8,2,6,4,5,3,7,0,0], % row sums
       S = [0,0,7,1,6,3,4,5,2,7,0,0]. % column sums


problem(2, R, S) =>
       R = [10,4,8,5,6],
       S = [5,3,4,0,5,0,5,2,2,0,1,5,1].


%
% This give three slightly different solutions.
problem(3, R, S) => 
        R = [11,5,4],
        S = [3,2,3,1,1,1,1,2,3,2,1].


% This is my own problem.
problem(4, R, S) => 
        R = [0,2,2,2,2,2,8,8,4,4,4,4,4,0],
        S = [0,0,0,12,12,2,2,2,2,7,7,0,0,0].
