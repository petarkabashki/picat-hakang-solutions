/* 

  Five translators problem in Picat.

  http://stackoverflow.com/questions/26260407/prolog-logic-puzzle-constraint-programming
  """
  Five translators are working in an international organization:
  Spaniard, Englishman, Frenchman, German and Russian.
  Each of them speaks its native language and also two
  languages from the native languages of other translators. Find
  the languages speaked by each translator if it is known that
  1. The Englishman speaks German.
  2. The Spaniard speaks French.
  3. The German does not speak Spanish.
  4. The Frenchman does not speak German.
  5. Spaniard and Englishman can talk with each other in German.
  6. Englishman and Frenchman can talk with each other in two languages.
  7. Four translators speak Russian.
  8. Exactly two translators speak French.
  9. Only one translator who speaks Spanish speaks also Russian.
  10. Russian and Englishman have no common languages except
  their native languages.
  """


  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


% import util.
import cp.


main => go.

go ?=>

  N = 5,

  Spanish = 1,
  English = 2,
  French = 3,
  German = 4,
  Russian = 5,

  Languages = new_map([1="Spanish",2="English",3="French",4="German",5="Russian"]),

  % decision variables
  X = new_list(N),
  foreach(I in 1..N) 
    % all speak 3 languages
    X[I] = new_list(3),
    X[I] :: 1..N,
    all_different(X[I]),
    increasing(X[I]) % symmetry breaking
  end,

  foreach(I in 1..N) 
    % one speak one's native language
    sum([J #= I : J in X[I]]) #= 1
  end,

  % 1. The Englishman speaks German.
  in2(X[English],German),

  % 2. The Spaniard speaks French.
  in2(X[Spanish],French),

  % 3. The German does not speak Spanish.
  notin2(X[German],Spanish),

  % 4. The Frenchman does not speak German.
  notin2(X[French],German),

  % % 5. Spaniard and Englishman can talk with each other in German.
  in2(X[Spanish],German),
  in2(X[English],German),

  % 6. Englishman and Frenchman can talk with each other in two languages.
  sum([sum([X[English,I] #= J : I in 1..3]) #= 1 #/\ 
       sum([X[French,I] #= J : I in 1..3]) #= 1 : J in 1..N]) #= 2,

  % 7. Four translators speak Russian.
  sum([ sum([X[I,J] #= Russian : J in 1..3]) #= 1 : I in 1..N]) #= 4,

  % 8. Exactly two translators speak French.
  sum([sum([X[I,J] #= French : J in 1..3]) : I in 1..N]) #= 2,

  % 9. Only one translator who speaks Spanish speaks also Russian.
  sum([sum([X[I,J] #= Spanish : J in 1..3]) #= 1 #/\
       sum([X[I,J] #= Russian : J in 1..3]) #= 1 : I in 1..N]) #= 1,

  % 10. Russian and Englishman have no common languages except their native languages.
  sum([ X[English,J1] #= X[Russian,J2] #/\ X[English,J1] #= Lang: J1 in 1..3, J2 in 1..3, Lang in [Spanish,French,German]]) #= 0,

  solve(X),

  println(X),

  foreach(I in 1..N)
    println(Languages.get(I)=[Languages.get(X[I,J]) : J in 1..3])
  end,
  
  fail,
  
  nl.

go => true.

increasing(List) =>
   foreach(I in 2..List.length) List[I-1] #=< List[I] end.

% E a member of X
in2(X,E) => 
  (sum([X[I] #= E : I in 1..X.length]) #= 1).

notin2(X,E) => sum([X[I] #= E : I in 1..X.length]) #= 0.
