/* 

  N'th (Rosetta code) in Picat.

  http://rosettacode.org/wiki/N%27th
  """
  Write a function/method/subroutine/... that when given an integer greater than or 
  equal to zero returns a string of the number followed by an apostrophe then the 
  ordinal suffix.
  Example returns would include 1'st 2'nd 3'rd 11'th 111'th 1001'st 1012'th

  Task

  Use your routine to show here the output for at least the following (inclusive) 
  ranges of integer inputs: 0..25, 250..265, 1000..1025

  Note: apostrophes are now optional to allow correct apostrophe-less English. 
  """

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


import util.


main => go.


go => 
  Ranges = [ 0..25, 250..265, 1000..1025],
    foreach(Range in Ranges) println([nth2(I) : I in Range])
  end,
  nl.

go2 => 
  Fs = [nth2,nth3,nth4,nth5],
  Ranges = [0..25, 250..265, 1000..1025],
  foreach(Fun in Fs)
     println(Fun),
     foreach(Range in Ranges) 
       println([apply(Fun,I) : I in Range])
     end
  end,
  nl.


%
% Translation of Prolog version
%
nth2(N) = N.to_string() ++ Th =>
  ( tween(N)     -> Th = "th"
  ; 1 = N mod 10 -> Th = "st"
  ; 2 = N mod 10 -> Th = "nd"
  ; 3 = N mod 10 -> Th = "rd"
  ; Th = "th" ). 
tween(N) => Tween = N mod 100, between(11, 13, Tween).

%
% variant using explicit conditions
%
nth3(N) = cc(N,"th"), tween(N) => true.
nth3(N) = cc(N,"st"), N mod 10 = 1 => true.
nth3(N) = cc(N,"nd"), N mod 10 = 2 => true.
nth3(N) = cc(N,"rd"), N mod 10 = 3 => true.
nth3(N) = cc(N,"th")  => true.
% helper function
cc(N,Th) = N.to_string() ++ Th.

%
% variant of nth3/1
%
nth4(N) = cc(N,"th"), tween(N) => true.
% note: we must use N mod 10 in the condition (using Mod don't work)
nth4(N) = cc(N,S[Mod]), member(N mod 10,1..3) =>
  Mod = N mod 10, S = ["st","nd","rd"].
nth4(N) = cc(N,"th")  => true.

%
% Translation of the Python version
%
nth5(N) = Nth => 
  Suffix = ["th","st","nd","rd","th","th","th","th","th","th"],
  Nth = N.to_string() ++ cond((N mod 100 <= 10; N mod 100 > 20), Suffix[1 + N mod 10], "th").
