/* 

  Twice the number with same digits in Picat.

  Inspired by
  http://math.stackexchange.com/questions/782334/interview-question-asked-in-yahoo?
  """
  Can you find the smallest positive number such that if you shuffle the digits 
  of the number in a particular order, the shuffled number becomes twice 
  the original number.
  
  Source: http://gpuzzles.com/mind-teasers/very-hard-maths-riddle/
  
  I understand the answer is 125874=>251748
  
  251748 is twice the 125874 and have same digits 1,2,4,5,7 & 8
  
  but how to solve this non programmatic ?
  """

  Also see
  http://math.blogoverflow.com/2014/06/11/when-do-n-and-2n-have-the-same-decimal-digits/



  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


import cp.
import util.

main => go.


go =>

  % length of array
  N :: 1..10,
  indomain(N),

  Num1 :: 10**(N-1)..(10**N)-1,
  Num2 :: 10**(N-1)..(10**N)-1,
  % the arrays
  Num1A = new_list(N), Num1A :: 0..9,
  Num2A = new_list(N), Num2A :: 0..9,

  % channel between number and array
  to_num(Num1A,Num1),
  to_num(Num2A,Num2),

  Num2 #= Num1*2,

  % ensure that same are used digits
  Gcc = new_list(10),
  Gcc :: 0..N,
  global_cardinality2(Num1A,Gcc),  
  global_cardinality2(Num2A,Gcc),  

  Vars = Num1A ++ Num2A,
  solve($[ff,split,min(Num1)], Vars),

  println(num1=Num1),
  println(num2=Num2),
  println(gcc=Gcc),

  nl.


global_cardinality2(A, Gcc) =>
   Len = length(A),
   Max = length(Gcc),
   Gcc :: 0..Len,
   foreach(I in 1..Max) count(I,A,#=,Gcc[I]) end.


% converts a number Num to/from a list of integer List given a base Base
%
to_num(List, Num) =>
   to_num(List, 10,Num).

to_num(List, Base, Num) =>
   Len = length(List),
   Num #= sum([List[I]*Base**(Len-I) : I in 1..Len]).
