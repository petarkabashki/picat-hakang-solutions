/*

  to_num in Picat.

  to_num(List, Base, Num) converts a list of integers to a number for 
  a base Base. It is bidirectional but it is really recommended that
  the length of List is fixed.

  See examples below.


  Model created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import cp.

main => go.

%
% Tests
% 
go =>

   % from number -> digit list
   A = new_list(4),
   A :: 0..9,       
   to_num(A, 10, 1234),
   writeln(a=A),

   % from digit list -> number
   B = [3,1,4,1,5,9,2,6],
   to_num(B, 10, Num),
   solve([Num]),
   writeln(num=Num),

   % show all 2 digit numbers in base 11, 
   C = new_list(2), 
   C :: 0..10, % For base 11
   L = findall([Num2, C], (to_num(C, 11, Num2), solve([ff],C))), 
   writeln([L.length, L]).

go2 =>
  A = new_list(4),
  A :: 0..9,       
  Num :: 0..9999,

  to_num(A, 10, Num),

  Num #> 5000,
  Num mod 3 #= 1,

  A[2] + A[3] #= A[4],
  all_different(A),
  sum(A) #= 22,

  solve(A ++ [Num]),
  println([a=A,num=Num]).



%
% converts a number Num to/from a list of integer List given a base Base
%
to_num(List, Base, Num) =>
   Len = length(List),
   Num #= sum([List[I]*Base**(Len-I) : I in 1..Len]).
