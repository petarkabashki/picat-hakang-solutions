/* 

  Continued fractions in Picat.

  From Rosetta code: 
  https://rosettacode.org/wiki/Continued_fraction
  """
  A number may be represented as a continued fraction (see Mathworld for more information) 
  as follows:

  ....
  a_0 + b_1/(a_1 + b_2/(a_2 + b_3/(a_3 + ... )))

  The task is to write a program which generates such a number and prints a real representation of it. 
  The code should be tested by calculating and printing the square root of 2, Napier's Constant, and Pi, 
  using the following coefficients:

  For the square root of 2, use a_0 = 1 then a_N = 2. b_N is always 1.

    sqrt 2 = 1 + (1/(2 + 1/(2 + 1/(2 + ...))))

  For Napier's Constant, use a_0 = 2, then a_N = N . b_1 = 1 then b_N = N − 1.

    e = 2 + 1/(1 + 1/(2 + 2/(3 + 3/(4 + ... ))))

  For Pi, use a a_0 = 3 then a a_N = 6, b_N = ( 2*N − 1)^2

    π = 3 + 1/(6 + 9/(6 + 25/(6 + ...)))

  ....
  
  ?- continued_fraction.
  sqrt(2) = 1.4142135623730951
  e       = 2.7182818284590455
  pi      = 3.141592622804847
  true .
  """

  This is a port of the Prolog solution.

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


% import util.
% import cp.


main => go.


go =>
  
  % square root 2
  continued_fraction(200, sqrt_2_ab, V1),
  printf("sqrt(2) = %w%n", V1),

  % napier
  continued_fraction(200, napier_ab, V2),
  printf("e       = %w%n", V2),

  % pi
  continued_fraction(200, pi_ab, V3),
  printf("pi      = %w%n", V3).
 
 
% code for continued fractions
continued_fraction(N, Compute_ab, V) ?=>
  continued_fraction(N,  Compute_ab, 0, V).
 
continued_fraction(0,  Compute_ab, Temp, V) ?=>
  call(Compute_ab, 0, A, _),
  V = A + Temp.
 
continued_fraction(N, Compute_ab, Tmp, V) =>
  call(Compute_ab, N, A, B),
  Tmp1 = B / (A + Tmp),
  N1 = N - 1,
  continued_fraction(N1, Compute_ab, Tmp1, V).


% specific codes for examples
% definitions for square root of 2
sqrt_2_ab(A, B, V) ?=> A=0,B=1,V=1.
sqrt_2_ab(_, B, V)  => B=2,V=1.
 
% definitions for napier
napier_ab(A, B, _) ?=> A=0,B=2.
napier_ab(A, B, V) ?=> A=1,B=1,V=1.
napier_ab(N1, N2, V) => 
  N1 = N2,
  V = N1 - 1.

% definitions for pi
pi_ab(A, B, _) ?=> A=0, B=3.
pi_ab(N, B, V) =>
  B = 6,
  V = (2 * N - 1)*(2 * N - 1).