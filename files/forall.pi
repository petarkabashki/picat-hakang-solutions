/* 

  forall in Picat.

  Testing forall/2 predicate.

  Inspired by B-Prolog's and SWI Prolog's forall/2:
     http://www.probp.com/manual/node35.html
     http://www.swi-prolog.org/pldoc/man?predicate=forall/2

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


% import util.
% import cp.


main => go.

go =>

   % All numbers satisfy p/1
   if forall($member(X,[1,2,3]),$p(X)) then
      println(ok1)
   else
     println(not_ok1)
   end,

   % Not all numbers satisfy p/1.
   if not forall($member(X,[1,2,3,20]),$p(X)) then
      println(ok2)
   else
     println(not_ok2)
   end,

   % All numbers satisfy q/1
   if forall($member(X,[1,2,3]),$q(X)) then
      println(ok3)
   else
     println(not_ok3)
   end,

   % Not all numbers satisfy q/1
   if not forall($member(X,[1,2,3,20]),$q(X)) then
      println(ok4)
   else
     println(not_ok4)
   end,

   % Not all numbers satisfy p/1
   if not forall($q2(X),$p(X)) then
      println(ok5)
   else
     println(not_ok6)
   end,


   % This works as well where 
   %     $(X < 10) 
   % is a lambda like expression
   % All numbers satisfies the condition
   if forall($member(X,[1,2,3,4]),$(X < 10)) then
      println(ok6)
   else
     println(not_ok6)
   end,

   % Not all numbers satisfies the expression
   if not forall($member(X,[1,2,3,4,20]),$(X < 10)) then
      println(ok7)
   else
     println(not_ok7)
   end,



   nl.


% The example from SWI Prolog 
% http://www.swi-prolog.org/pldoc/man?predicate=forall/2
% 
%   forall($member(Result = Formula, [2 = 1 + 1, 4 = 2 * 2]),(Result == Formula)),
%   nl.
%
% Note that we must use $() to escape the expressions and use 
%    Result =:= Formula
% to force arithmetic comparison.
% 
go2 => 

   if forall($member(Result = Formula, $[2 = 1 + 1, 4 = 2 * 2]), $(Result =:= Formula)) then
       println(ok1)
   else
       print(not_ok1)
   end,

   if forall($member(Result = Formula, $[2=1 + 1, 4=2 * 2]), $z(Result,Formula)) then
       println(ok2)
   else
       print(not_ok2)
   end,

   % Failure test.
   if not forall($member(Result = Formula, $[2 = 1 + 1, 4 = 2 * 2, 6 = 3*3]), $(Result =:= Formula)) then
       println(ok3)
   else
       print(not_ok3)
   end,

   if not forall($member(Result = Formula, $[2=1 + 1, 4=2 * 2, 6=3*3]), $z(Result,Formula)) then
       println(ok4)
   else
       print(not_ok4)
   end,


   nl.


% predicate to test
p(X) => X < 10.

q(X) => member(X,[1,2,3]).

q2(X) => member(X,[1,2,13]).

z(X,Y) => X =:= Y.

%
% From B-Prolog: http://www.probp.com/manual/node35.html
%
forall(Generate, Test) => not (call(Generate), not call(Test)).

