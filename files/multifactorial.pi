/* 

  Multifactorial (Rosetta code) in Picat.

  http://rosettacode.org/wiki/Multifactorial
  """
  The factorial of a number, written as n! is defined as n! = n(n − 1)(n − 2)...(2)(1)

  A generalization of this is the multifactorials where:

    n! = n(n − 1)(n − 2)...(2)(1) 
    n!! = n(n − 2)(n − 4)... 
    n!!! = n(n − 3)(n − 6)... 
    n!!!! = n(n − 4)(n − 8)... 
    n!!!!! = n(n − 5)(n − 10)... 
    Where the products are for positive integers. 

  If we define the degree of the multifactorial as the difference in successive terms that are 
  multiplied together for a multifactorial (The number of exclamation marks) then the task is to

   - Write a function that given n and the degree, calculates the multifactorial.
   - Use the function to generate and display here a table of the first 1..10 members of 
     the first five degrees of multifactorial. 
  """
  

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

% for the reversible multifactorial7
import cp.
import util.


main => go.


go =>

  foreach(D in 1..5)
     println(D=[multifactorial(I,D) : I in 1..10])
  end,  
  nl.

go2 => 
  Funcs = [multifactorial,
           multifactorial2,
           multifactorial3,
           multifactorial4,
           multifactorial5,
           multifactorial6
  ],
  foreach(Func in Funcs)
     println(Func),
     foreach(D in 1..5)
        println(D=[apply(Func,I,D) : I in 1..10])
     end
  end,
  nl.

% reversible variant
go3 => 
  foreach(D in 1..5)
    println(D=[M : I in 1..10,multifactorial7(I,D,M)])
  end,

  % find the Degree given I and M
  % Degree 3
  println("\nReversible: find D given I and M:"),
  Ms = [M : I in 1..18,multifactorial7(I,3,M)],
  println(ms=Ms),

  % Note: When I <= Degree, D can have many solutions
  foreach({M,I} in zip(Ms,1..Ms.length))
    once(multifactorial7(I,D,M)),
    solve([ff,split],[D]),
    println([i=I,m=M,d=D])
  end,

  nl.

go4 =>
   println([ [(1..10).map($rev(multifactorial,D))] : D in 1..5 ].join("\n")).
  

% multifactorial(N,Degree) = N, N <= Degree => true.
multifactorial(N,Degree) = prod([ I : I in N..-Degree..1]).

% variant of multifactorial/2
multifactorial2(N,Degree) = reduce(*, [I : I in N..-Degree..1]).

% another approach
multifactorial3(N,Degree) = M => 
  M = 1, I = N,
  while(I > 0) 
    M := M*I,
    I := I - Degree
  end.

% recursive variant
multifactorial4(N,_D) = 1, N <= 0 => true.
multifactorial4(N,D) = N*multifactorial4(N-D,D).

multifactorial5(N,D) = M =>
 N <= 0 -> M = 1 ; M = N*multifactorial4(N-D,D).

multifactorial6(N,D) = cond(N <= 0, 1, N*multifactorial6(N-D,D)).

% reversible variant (using CP)
multifactorial7(N,_D,M) ?=> 
 N #<= 0, M #= 1.
multifactorial7(N,D,M) =>
 D #> 0,
 N #> 0,
 ND #= N-D,
 multifactorial7(ND,D,M1),
 M #= N*M1.



% reverse arguments of a function,
%  e.g.   f(A,B) -> f(B,A)
rev(F,A,B) = apply(F,B,A).
