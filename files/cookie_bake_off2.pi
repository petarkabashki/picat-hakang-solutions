/* 

  Cookie bake off problem in Picat.

  http://puzzlor.editme.com/Cookiebakeoff
  """
  Historically, baking has been considered an art rather than a science.  
  As a contestant in a cookie bake-off, your attempts to create the perfect cookie have 
  failed.  For your final attempt, you decide to use your analytical skills to analyze 
  your past attempts to see if you can find the recipe for the perfect cookie.
  Table 1 shows your past 15 attempted recipes, each with varying amounts of 
  Sugar, Flour, and Butter, and a corresponding judgeâ€™s score for each recipe.  
  The judgeâ€™s scores range from 0 (worst) to 100 (best).  None of your recipes so 
  far have achieved the coveted perfect score of 100.  All recipes sum up to 
  8 cups total of the three ingredients.
  
  Batch Sugar 	Flour 	Butter 	Score
  1 	3 	4 	1 	70
  2 	1 	4 	3 	95
  3 	2 	2 	4 	45
  4 	2 	1 	5 	20
  5 	2 	3 	3 	85
  6 	3 	2 	3 	55
  7 	2 	5 	1 	80
  8 	1 	1 	6 	15
  9 	1 	5 	2 	90
  10 	3 	3 	2 	75
  11 	4 	2 	2 	40
  12 	1 	3 	4 	65
  13 	1 	6 	1 	60
  14 	4 	1 	3 	25
  15 	4 	3 	1 	50
  
  Table 1
  
  Question:  Given your past recipes and scores, which recipe below has the best chance 
  of achieving a perfect score of 100?
     a.) 1 cup sugar; 2 cups flour; 5 cups butter
     b.) 2 cups sugar; 4 cups flour; 2 cup butter
     c.) 3 cups sugar; 1 cup flour; 4 cups butter
  
  Send your answer to puzzlor@gmail.com by February 15th, 2013. 
  """

  This is the LP version of http://hakank.org/picat/cookie_bake_off.pi

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


import mip.

main => go.


go =>


  Scores = [[3.0,4.0,1.0, 70.0],
            [1.0,4.0,3.0, 95.0],
            [2.0,2.0,4.0, 45.0],
            [2.0,1.0,5.0, 20.0],
            [2.0,3.0,3.0, 85.0],
            [3.0,2.0,3.0, 55.0],
            [2.0,5.0,1.0, 80.0],
            [1.0,1.0,6.0, 15.0],
            [1.0,5.0,2.0, 90.0],
            [3.0,3.0,2.0, 75.0],
            [4.0,2.0,2.0, 40.0],
            [1.0,3.0,4.0, 65.0],
            [1.0,6.0,1.0, 60.0],
            [4.0,1.0,3.0, 25.0],
            [4.0,3.0,1.0, 50.0]],

  ScoresTest = [[1.0,2.0,5.0],
                [2.0,4.0,2.0],
                [3.0,1.0,4.0]],
            

  N = Scores.length,
  M = Scores[1].length,
  println([n=N,m=M]),  

  % decision variables
  X = new_list(M-1),
  X :: 0.0..100.0,
  DiffsPlus = new_list(N),
  DiffsPlus :: 0.0..100.0,
  DiffsMinus = new_list(N),
  DiffsMinus :: -100.0..0.0, 


  println(diffs=Diffs),
  
  foreach(I in 1..N) 
     % Diffs[I] #>= -100.0,
     % Diffs[I] #<= 100.0,
     Scores[I, M] #= sum([(X[J]*Scores[I,J]): J in 1..M-1]) + DiffsPlus[I]+DiffsMinus[I]
  end,

  % DiffsSum #= sum([abs(Diffs[I]) : I in 1..N]), % don't work 
  DiffsSum #= sum([DiffsPlus[I] + DiffsMinus[I] : I in 1..N]),
  println(diffsSum=DiffsSum),

  Vars = X ++ DiffsPlus ++ DiffsMinus,
  solve($[min(DiffsSum)], Vars),
  % solve(X++Diffs),
  println(x=X),
  println(diffsPlus=DiffsPlus),
  println(diffsMinus=DiffsMinus),  
  println(diffsSum=DiffsSum),

  println(testing),
  foreach(T in 1..3)
     println([T, sum([ScoresTest[T,I]*X[I] : I in 1..M-1])])
  end,

  nl.

