/* 

  Maze problem ("GPS") in Picat.

  Maze problem from Chapter 4 of 
  Peter Norvig's Paradigms of Artificial Intelligence Programming (PAIP)

  This program use the "GPS" module
    http://www.hakank.org/picat/gps_utils.pi

  Compare with http://www.hakank.org/picat/test_planner_maze.pi

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import gps_utils.

main => go.


go =>
  Init = $[at(1)],
  Final = $[at(25)],
  println(init=Init),
  println(final_state=Final),
  cl_facts($[final2(Final)],$[final2(-)]),
  make_maze,
  gps_best_plan(Init),
  
  nl.

% define the maze
make_maze =>
  maze1(Maze1),
  % undirected maze
  Maze = [$[maze(From,To), maze(To,From)] : [From,To] in Maze1].flatten(),
  % directed maze
  % Maze = [$[maze(From,To)] : [From,To] in Maze1].flatten(),
  cl_facts(Maze).


maze1(Maze) => 
    Maze = [[1,2],[2,3],[3,4],[4,9],[9,14],[9,8],[8,7],[7,12],[12,13],
            [12,11],[11,6],[11,16],[16,17],[17,22],[21,22],[22,23],
            [23,18],[23,24],[24,19],[19,20],[20,15],[15,10],[10,5],[20,25]].

%
% ensure that all goals in final2/1 are in the list L.
%
final(L) =>
  final2(Final2),
  pre(L,Final2),
  writeln(final=L).

action(From,To,Move,Cost) ?=> 
  pre(From,$[at(X)]),
  maze(X,Y),
  To = From.del($[at(X)]).add($[at(Y)]),
  Move = [move,from,X,to,Y],
  Cost = 1.
